# Dockerfile.gpu (최종 최적화 버전)

# 1. 베이스 이미지
FROM gcr.io/deeplearning-platform-release/pytorch-gpu.2-1:latest

# 2. 빌드 시점에 받을 모든 환경변수를 ARG로 선언합니다.
#    여기에 ENV_GPU에 포함된 모든 변수명을 추가해야 합니다.
#    (예시: ARG HF_AUTH_TOKEN)
#    하지만 더 유연한 방법은 아래 Dockerfile 레이어와 워크플로우를 사용하는 것입니다.
#    이 파일은 지금은 그대로 둡니다. 워크플로우에서 모든 것을 처리합니다.

# 3. 기본 환경변수 설정 (변경 빈도가 가장 낮음)
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    TOKENIZERS_PARALLELISM=false \
    PYTHONPATH=/workspace \
    PIP_NO_CACHE_DIR=1

# 4. 작업 디렉토리 설정
WORKDIR /workspace

# 5. 시스템 패키지 설치 (의존성 변경 전까지 캐시됨)
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt/lists \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        software-properties-common \
        curl \
        git \
        build-essential \
        python3-dev \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get install -y python3.10 python3.10-distutils \
    && curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10 \
    && ln -sf /usr/bin/python3.10 /usr/bin/python \
    && ln -sf /usr/bin/pip3 /usr/bin/pip

# 6. pip 업그레이드
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip

# 7. Python 의존성 설치 (requirements.gpu.txt 변경 전까지 캐시됨)
COPY requirements.gpu.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    pip uninstall -y torch torchvision torch_xla || true \
    && pip install -r requirements.gpu.txt \
    && pip install --upgrade tokenizers transformers faker

# 8. 소스 코드 복사 (소스 코드 변경 전까지 캐시됨)
COPY . /workspace/

# .env 파일 복사 (이 줄을 추가!)
COPY .env /workspace/.env

# 9. 포트 노출 및 실행 명령
EXPOSE 8080
CMD ["python", "-m", "uvicorn", "app.main_gpu:app", "--host", "0.0.0.0", "--port", "8080"]