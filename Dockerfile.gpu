# Dockerfile.gpu - GPU 가속을 활용한 빌드용
# CUDA 11.8 베이스 이미지 사용 (PyTorch와 호환성 좋음)
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 AS builder

# 기본 환경 변수 설정
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    CUDA_VISIBLE_DEVICES=all \
    TORCH_CUDA_ARCH_LIST="7.0 7.5 8.0 8.6+PTX" \
    TORCH_NVCC_FLAGS="-Xfatbin -compress-all"

# 시스템 패키지 설치 (병렬 설치로 가속화)
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3-pip \
    python3-dev \
    build-essential \
    git \
    curl \
    pkg-config \
    libhdf5-serial-dev \
    ninja-build \
    cmake \
    && rm -rf /var/lib/apt/lists/*

# 작업 디렉토리 설정
WORKDIR /build

# 의존성 파일 복사 및 설치 (GPU 가속 활용)
COPY requirements.cpu.txt requirements.txt
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel \
    && pip3 install --no-cache-dir --index-url https://download.pytorch.org/whl/cu118 torch \
    && pip3 install --no-cache-dir -r requirements.txt \
    && pip3 install --no-cache-dir --upgrade tokenizers transformers faker

# 멀티스테이지 빌드: 최종 이미지 생성 (더 가벼운 실행 환경)
FROM nvidia/cuda:11.8.0-runtime-ubuntu22.04

# 환경 변수 설정
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    TOKENIZERS_PARALLELISM=false \
    PYTHONPATH=/workspace/app

# 시스템 패키지 설치 (최소한으로)
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# 작업 디렉토리 설정
WORKDIR /workspace

# 빌드 단계에서 설치된 파이썬 패키지 복사
COPY --from=builder /usr/local/lib/python3.10/dist-packages /usr/local/lib/python3.10/dist-packages
COPY --from=builder /usr/lib/python3/dist-packages /usr/lib/python3/dist-packages

# 애플리케이션 코드 복사
COPY . /workspace/

# 디버그: 빌드 시점에 출력
RUN echo "===== /workspace/app 구조 =====" \
 && find /workspace/app -maxdepth 2 | sort \
 && echo "\n===== Python sys.path =====" \
 && python3 -c "import sys; print(sys.path)" \
 && echo "\n===== fast_api 패키지 =====" \
 && ls -R /workspace/app/fast_api

# 포트 노출 및 컨테이너 시작
EXPOSE 8080

# ENTRYPOINT 및 CMD
ENTRYPOINT ["python3", "-m", "uvicorn"]
CMD ["app.main:app", "--host", "0.0.0.0", "--port", "8080"]
