# Dockerfile.gpu

# ──────────────────────────────────────────────────
# 최적화된 Dockerfile.gpu - 빌드 속도 개선 (캐싱 강화)
# ──────────────────────────────────────────────────
FROM gcr.io/deeplearning-platform-release/pytorch-gpu.2-1:latest

# ──────────────────────────────────────────────────
# 1. 빌드 인자 정의 (변경 빈도가 낮은 것부터)
# ──────────────────────────────────────────────────
ARG HF_AUTH_TOKEN
ARG GITHUB_TOKEN
ARG LANGSMITH_TRACING
ARG LANGSMITH_ENDPOINT
ARG LANGSMITH_API_KEY
ARG LANGCHAIN_PROJECT
ARG GEMINI_API_KEY
ARG USE_REMOTE_CHROMA
ARG QDRANT_API_KEY
ARG QDRANT_URL
ARG QDRANT_COLLECTION

# ──────────────────────────────────────────────────
# 2. 환경변수 설정 (pip 캐시 활성화로 변경)
# ──────────────────────────────────────────────────
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    TOKENIZERS_PARALLELISM=false \
    PYTHONPATH=/workspace \
    PIP_NO_CACHE_DIR=1

# ──────────────────────────────────────────────────
# 3. 작업 디렉토리 설정
# ──────────────────────────────────────────────────
WORKDIR /workspace

# ──────────────────────────────────────────────────
# 4. 시스템 패키지 설치 (캐시 마운트 활용)
# ──────────────────────────────────────────────────
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt/lists \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        software-properties-common \
        curl \
        git \
        build-essential \
        python3-dev \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get install -y python3.10 python3.10-distutils \
    && curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10 \
    && ln -sf /usr/bin/python3.10 /usr/bin/python \
    && ln -sf /usr/bin/pip3 /usr/bin/pip

# ──────────────────────────────────────────────────
# 5. pip 업그레이드 (캐시 마운트 활용)
# ──────────────────────────────────────────────────
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip

# ──────────────────────────────────────────────────
# 6. requirements 파일만 먼저 복사 (의존성 캐싱 최적화)
# ──────────────────────────────────────────────────
COPY requirements.gpu.txt .

# ──────────────────────────────────────────────────
# 7. Python 패키지 설치 (캐시 마운트 활용)
# ──────────────────────────────────────────────────
RUN --mount=type=cache,target=/root/.cache/pip \
    pip uninstall -y torch torchvision torch_xla || true \
    && pip install -r requirements.gpu.txt \
    && pip install --upgrade tokenizers transformers faker

# ──────────────────────────────────────────────────
# 8. 소스 코드 복사 (가장 마지막에 수행)
# ──────────────────────────────────────────────────
COPY . /workspace/

# ──────────────────────────────────────────────────
# 9. 환경변수 파일 생성 (런타임에 생성하도록 변경)
# ──────────────────────────────────────────────────
ENV HF_AUTH_TOKEN=${HF_AUTH_TOKEN} \
    GITHUB_TOKEN=${GITHUB_TOKEN} \
    LANGSMITH_TRACING=${LANGSMITH_TRACING} \
    LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT} \
    LANGSMITH_API_KEY=${LANGSMITH_API_KEY} \
    LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT} \
    GEMINI_API_KEY=${GEMINI_API_KEY} \
    USE_REMOTE_CHROMA=${USE_REMOTE_CHROMA} \
    QDRANT_API_KEY=${QDRANT_API_KEY} \
    QDRANT_URL=${QDRANT_URL} \
    QDRANT_COLLECTION=${QDRANT_COLLECTION}

# ──────────────────────────────────────────────────
# 10. 포트 노출 및 실행 명령
# ──────────────────────────────────────────────────
EXPOSE 8080

# 시작 스크립트 생성 및 실행
RUN echo '#!/bin/bash\n\
# .env 파일 생성\n\
echo "HF_AUTH_TOKEN=${HF_AUTH_TOKEN}" > /workspace/.env\n\
echo "GITHUB_TOKEN=${GITHUB_TOKEN}" >> /workspace/.env\n\
echo "LANGSMITH_TRACING=${LANGSMITH_TRACING}" >> /workspace/.env\n\
echo "LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT}" >> /workspace/.env\n\
echo "LANGSMITH_API_KEY=${LANGSMITH_API_KEY}" >> /workspace/.env\n\
echo "LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT}" >> /workspace/.env\n\
echo "GEMINI_API_KEY=${GEMINI_API_KEY}" >> /workspace/.env\n\
echo "USE_REMOTE_CHROMA=${USE_REMOTE_CHROMA}" >> /workspace/.env\n\
echo "QDRANT_API_KEY=${QDRANT_API_KEY}" >> /workspace/.env\n\
echo "QDRANT_URL=${QDRANT_URL}" >> /workspace/.env\n\
echo "QDRANT_COLLECTION=${QDRANT_COLLECTION}" >> /workspace/.env\n\
\n\
# FastAPI 서버 실행\n\
exec python -m uvicorn app.main_gpu:app --host 0.0.0.0 --port 8080\n\
' > /workspace/start.sh && chmod +x /workspace/start.sh

CMD ["/workspace/start.sh"]