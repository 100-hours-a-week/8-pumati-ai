# Dockerfile.gpu

# ──────────────────────────────────────────────────
# 최적화된 Dockerfile.gpu - 빌드 속도 개선
# ──────────────────────────────────────────────────
FROM gcr.io/deeplearning-platform-release/pytorch-gpu.2-1:latest

# ──────────────────────────────────────────────────
# 1. 빌드 인자 정의 (변경 빈도가 낮은 것부터)
# ──────────────────────────────────────────────────
ARG HF_AUTH_TOKEN
ARG GITHUB_TOKEN
ARG LANGSMITH_TRACING
ARG LANGSMITH_ENDPOINT
ARG LANGSMITH_API_KEY
ARG LANGCHAIN_PROJECT
ARG GEMINI_API_KEY
ARG USE_REMOTE_CHROMA
ARG QDRANT_API_KEY
ARG QDRANT_URL
ARG QDRANT_COLLECTION

# ──────────────────────────────────────────────────
# 2. 환경변수 설정 (한번에 설정하여 레이어 최소화)
# ──────────────────────────────────────────────────
ENV HF_AUTH_TOKEN=${HF_AUTH_TOKEN} \
    GITHUB_TOKEN=${GITHUB_TOKEN} \
    LANGSMITH_TRACING=${LANGSMITH_TRACING} \
    LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT} \
    LANGSMITH_API_KEY=${LANGSMITH_API_KEY} \
    LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT} \
    GEMINI_API_KEY=${GEMINI_API_KEY} \
    USE_REMOTE_CHROMA=${USE_REMOTE_CHROMA} \
    QDRANT_API_KEY=${QDRANT_API_KEY} \
    QDRANT_URL=${QDRANT_URL} \
    QDRANT_COLLECTION=${QDRANT_COLLECTION} \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    TOKENIZERS_PARALLELISM=false \
    PYTHONPATH=/workspace \
    PIP_NO_CACHE_DIR=0

# ──────────────────────────────────────────────────
# 3. 작업 디렉토리 설정
# ──────────────────────────────────────────────────
WORKDIR /workspace

# ──────────────────────────────────────────────────
# 4. 시스템 패키지 설치 (한 번에 설치하여 레이어 최소화)
# ──────────────────────────────────────────────────
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt/lists \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        software-properties-common \
        curl \
        git \
        build-essential \
        python3-dev \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update \
    && apt-get install -y python3.10 python3.10-distutils \
    && curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10 \
    && ln -sf /usr/bin/python3.10 /usr/bin/python \
    && ln -sf /usr/bin/pip3 /usr/bin/pip \
    && rm -rf /var/lib/apt/lists/*

# requirements 설치
COPY requirements.gpu.txt .
RUN pip install --no-cache-dir --upgrade pip \
 && pip uninstall -y torch torchvision torch_xla || true \
 && pip install --no-cache-dir -r requirements.gpu.txt \
 && pip install --no-cache-dir --upgrade tokenizers transformers faker

# .env 파일 생성
RUN echo "HF_AUTH_TOKEN=${HF_AUTH_TOKEN}" > /workspace/.env && \
    echo "GITHUB_TOKEN=${GITHUB_TOKEN}" >> /workspace/.env && \
    echo "LANGSMITH_TRACING=${LANGSMITH_TRACING}" >> /workspace/.env && \
    echo "LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT}" >> /workspace/.env && \
    echo "LANGSMITH_API_KEY=${LANGSMITH_API_KEY}" >> /workspace/.env && \
    echo "LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT}" >> /workspace/.env && \
    echo "GEMINI_API_KEY=${GEMINI_API_KEY}" >> /workspace/.env && \
    echo "USE_REMOTE_CHROMA=${USE_REMOTE_CHROMA}" >> /workspace/.env && \
    echo "QDRANT_API_KEY=${QDRANT_API_KEY}" >> /workspace/.env && \
    echo "QDRANT_URL=${QDRANT_URL}" >> /workspace/.env && \
    echo "QDRANT_COLLECTION=${QDRANT_COLLECTION}" >> /workspace/.env

# 소스 코드 복사
COPY . /workspace/

# FastAPI 서버 실행
EXPOSE 8080
CMD ["python", "-m", "uvicorn", "app.main_gpu:app", "--host", "0.0.0.0", "--port", "8080"]