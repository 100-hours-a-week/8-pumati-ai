#Dockerfile

# 로컬용
# FROM python:3.10

# gpu용
FROM gcr.io/deeplearning-platform-release/pytorch-gpu.2-1:latest

# 빌드 인자 정의 : 허깅페이스 토큰 추가
ARG HF_AUTH_TOKEN
ENV HF_AUTH_TOKEN=${HF_AUTH_TOKEN}

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    TOKENIZERS_PARALLELISM=false \
    PYTHONPATH=/workspace


# Python 3.10 설치
RUN apt-get update && \
    apt-get install -y software-properties-common curl git && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.10 python3.10-distutils && \
    curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10 && \
    ln -sf /usr/bin/python3.10 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# 작업 폴더 설정
WORKDIR /workspace

# 시스템 패키지 설치
RUN apt-get update && apt-get install -y --no-install-recommends \
      build-essential \
      python3-dev \
      git \
    && rm -rf /var/lib/apt/lists/*

# requirements.gpu.txt 복사 후 Python 의존성 설치
COPY requirements.gpu.txt .
RUN pip install --no-cache-dir --upgrade pip \
 && pip uninstall -y torch torchvision torch_xla || true \
 && pip install --no-cache-dir -r requirements.gpu.txt \
 && pip install --no-cache-dir --upgrade tokenizers transformers faker

# .env 파일 생성 - HF_AUTH_TOKEN을 포함시킴
RUN echo "HF_AUTH_TOKEN=${HF_AUTH_TOKEN}" > /workspace/.env

# 소스 코드 복사
COPY . /workspace/

# 포트 노출 및 FastAPI 서버 실행
EXPOSE 8080
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080"]