# PyTorch 2.7.0 with CUDA 12.1 (공식 이미지)
FROM pytorch/pytorch:2.7.0-cuda12.8-cudnn9-runtime
# syntax=docker/dockerfile:1.4
#FROM --platform=linux/amd64 pytorch/pytorch:2.7.0-cuda12.8-cudnn9-runtime

#FROM pytorch/pytorch:2.7.0-cuda11.8-cudnn8-devel
#FROM pytorch/pytorch:2.7.0-cuda11.8-cudnn8-runtime
#2.7.0-cuda11.8-cudnn8-runtime

# 기본 시스템 패키지 설치: libglib2.0-0, libgl1은 cv2라이브러리 실행을 위한 필수 패키지. 
RUN apt-get update && apt-get install -y \
    libglib2.0-0 \
    libgl1 \
    git \
    curl \
    libvulkan1 \
    chromium-browser \
    chromium-chromedriver \
    wget \
    unzip \
    libnss3 \
    libxss1 \
    libappindicator3-1 \
    libasound2 \
    fonts-liberation \
    xdg-utils \
    libatk-bridge2.0-0 \
    libgtk-3-0 \
    libgbm1 \
    #libgl1-mesa-glx \
    && rm -rf /var/lib/apt/lists/*

# 작업 디렉토리 설정
WORKDIR /app

# 캐시 디렉토리 미리 생성 및 환경 변수 설정
ENV HUGGINGFACE_HUB_CACHE=/app/.cache/huggingface
ENV TRANSFORMERS_CACHE=/app/.cache/transformers
ENV HF_HOME=/app/.cache/huggingface
RUN mkdir -p /app/.cache/huggingface /app/.cache/transformers

# requirements.txt 복사 및 설치
COPY requirements.badge.txt .
RUN pip install --upgrade pip
RUN pip install -r requirements.badge.txt

# RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
#     apt-get install -y ./google-chrome-stable_current_amd64.deb && \
#     rm google-chrome-stable_current_amd64.deb

RUN wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/137.0.7151.70/linux64/chrome-linux64.zip && \
    unzip chrome-linux64.zip && \
    mv chrome-linux64 /opt/chrome && \
    ln -s /opt/chrome/chrome /usr/bin/google-chrome && \
    rm chrome-linux64.zip

RUN wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/137.0.7151.70/linux64/chromedriver-linux64.zip && \
unzip chromedriver-linux64.zip && \
mv chromedriver-linux64/chromedriver /usr/bin/chromedriver && \
chmod +x /usr/bin/chromedriver && \
rm -rf chromedriver-linux64* 

# 🚀 모델 다운로드 스크립트 생성 및 실행
ARG HUGGINGFACE_HUB_TOKEN
ENV HUGGINGFACE_HUB_TOKEN=${HUGGINGFACE_HUB_TOKEN}

# 모델 다운로드 스크립트 생성
RUN echo '#!/usr/bin/env python3\n\
import os\n\
import sys\n\
import time\n\
from huggingface_hub import login, snapshot_download\n\
import torch\n\
\n\
print("🚀 Docker 빌드 중 모델 다운로드 시작 (메모리 최적화)")\n\
\n\
# HF 토큰 확인\n\
token = os.getenv("HUGGINGFACE_HUB_TOKEN")\n\
if not token:\n\
    print("❌ HUGGINGFACE_HUB_TOKEN가 설정되지 않았습니다!")\n\
    sys.exit(1)\n\
\n\
print(f"🔑 토큰 확인: {token[:10]}****")\n\
\n\
# Hugging Face 로그인\n\
try:\n\
    login(token=token)\n\
    print("✅ Hugging Face 로그인 성공!")\n\
except Exception as e:\n\
    print(f"❌ Hugging Face 로그인 실패: {e}")\n\
    sys.exit(1)\n\
\n\
# 캐시 디렉토리 확인\n\
cache_dir = "/app/.cache/huggingface"\n\
print(f"📁 캐시 디렉토리: {cache_dir}")\n\
\n\
def download_with_retry(repo_id, max_retries=3):\n\
    """재시도 로직이 있는 다운로드 함수"""\n\
    for attempt in range(max_retries):\n\
        try:\n\
            print(f"📥 {repo_id} 다운로드 시도 {attempt + 1}/{max_retries}...")\n\
            snapshot_download(\n\
                repo_id,\n\
                cache_dir=cache_dir,\n\
                local_files_only=False,\n\
                resume_download=True,\n\
                max_workers=2\n\
            )\n\
            print(f"✅ {repo_id} 다운로드 완료!")\n\
            return True\n\
        except Exception as e:\n\
            print(f"❌ {repo_id} 다운로드 실패 (시도 {attempt + 1}): {e}")\n\
            if attempt < max_retries - 1:\n\
                wait_time = (attempt + 1) * 10\n\
                print(f"⏳ {wait_time}초 후 재시도...")\n\
                time.sleep(wait_time)\n\
            else:\n\
                print(f"💥 {repo_id} 최종 다운로드 실패!")\n\
                return False\n\
    return False\n\
\n\
try:\n\
    # 🚀 메모리 효율적인 다운로드 방식 (재시도 포함)\n\
    models = [\n\
        ("diffusers/controlnet-canny-sdxl-1.0-small", "ControlNet"),\n\
        ("stabilityai/stable-diffusion-xl-base-1.0", "SDXL Base"),\n\
        ("stabilityai/stable-diffusion-xl-refiner-1.0", "Refiner")\n\
    ]\n\
    \n\
    for i, (repo_id, name) in enumerate(models, 1):\n\
        print(f"📥 {i}/3 {name} 모델 다운로드 중... (다운로드만)")\n\
        if not download_with_retry(repo_id):\n\
            print(f"💥 {name} 모델 다운로드 실패로 빌드 중단!")\n\
            sys.exit(1)\n\
        print(f"🎉 {name} 모델 다운로드 성공!")\n\
        print("💾 메모리 정리 중...")\n\
        time.sleep(2)  # 메모리 정리 시간\n\
    \n\
    print("🎉 모든 모델 다운로드 성공! (메모리 사용량 최소화)")\n\
    print("💡 런타임에서 캐시된 모델을 로드하여 사용합니다.")\n\
    \n\
except Exception as e:\n\
    print(f"❌ 모델 다운로드 실패: {e}")\n\
    import traceback\n\
    traceback.print_exc()\n\
    sys.exit(1)\n\
' > /app/download_models.py

# 모델 다운로드 실행
RUN chmod +x /app/download_models.py && python /app/download_models.py

# 다운로드 스크립트 삭제 (이미지 크기 최적화)
RUN rm /app/download_models.py

# 앱 코드 복사
COPY . .

# Chrome 환경 변수 설정
ENV CHROME_BIN=/usr/bin/chromium-browser
ENV CHROMEDRIVER_PATH=/usr/bin/chromedriver

# FastAPI 앱 실행 (포트는 필요에 따라 조정)
CMD ["uvicorn", "app.main_badge:app_badge", "--host", "0.0.0.0", "--port", "8080"]