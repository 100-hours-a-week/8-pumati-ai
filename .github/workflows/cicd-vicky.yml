# cicd-vicky.yml
# GitHub Actions 워크플로우 이름
name: Build and Push to Artifact Registry

# 워크플로우 트리거 조건 설정
# main 브랜치에 push 이벤트가 발생했을 때 실행됩니다. 필요에 따라 브랜치 이름을 변경하세요.
on:
  push:
    branches:
      - feat/24-comment-Dockerfile

jobs:
  build-and-push:
    name: Build and Push Docker image to Artifact Registry
    runs-on: self-hosted
    # id-token 권한은 WIF를 사용하지 않으므로 제거해도 됩니다. (선택 사항)
    # permissions:
    #   contents: 'read'

    # 환경 변수 설정
    env:
      GCP_PROJECT_ID: ktb8team-458916 
      ARTIFACT_REGISTRY_LOCATION: "asia-east1"
      ARTIFACT_REGISTRY_REPO: "ktb8team"
      IMAGE_NAME: "dev/ai-vicky"
      DOCKERFILE_PATH: "Dockerfile.cpu"

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Google Cloud 인증 (서비스 계정 키 사용)
      # 중요: GitHub 저장소 Secrets에 'GCP_SA_KEY' 이름으로 서비스 계정 키 JSON 파일의 내용을 저장해야 합니다.
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # 3. Google Cloud SDK (gcloud CLI) 설정 (선택 사항, auth 단계에서 이미 gcloud가 설정될 수 있음)
      # - name: Set up Cloud SDK
      #   uses: 'google-github-actions/setup-gcloud@v2'

      # 4. Artifact Registry에 Docker 인증 설정
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev --quiet

      # 5. Docker 이미지 빌드
      # github.sha는 현재 커밋의 SHA 해시로, 이미지 태그의 고유성을 보장합니다.
      # linux/amd64 플랫폼을 명시합니다.
      - name: Build Docker image
        run: |
          DOCKER_BUILDKIT=1 docker build --platform linux/amd64 \
            -t ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -f ${{ env.DOCKERFILE_PATH }} .

      # 6. Docker 이미지를 Artifact Registry에 푸시
      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # (선택 사항) 생성된 이미지 전체 주소 출력
      - name: Output image URL
        run: |
          echo "Image pushed to: ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

      # 7. Docker 레이어 캐싱
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
