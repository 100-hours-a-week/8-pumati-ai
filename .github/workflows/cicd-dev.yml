# cicd-anna.yml

# GitHub Actions 워크플로우 이름
name: Build and Push Anna AI Image

# 워크플로우 트리거 조건 설정 
# main 브랜치에 push 이벤트가 발생했을 때 실행됩니다. 필요에 따라 브랜치 이름을 변경하세요.
on:
  push:
    branches:
      # 브랜치는 맞게 잘 바꿔서.
      - dev
      - feat/159-db-summary

jobs:
  build-and-push:
    # 커밋 메시지에 [gpu]가 포함된 경우에만 실행
    if: ${{ contains(github.event.head_commit.message, '[gpu]') }}
    name: Build and Push Docker image
    runs-on: self-hosted
    
    # 환경 변수 설정
    env:
      GCP_PROJECT_ID: ktb8team-458916 
      ARTIFACT_REGISTRY_LOCATION: "asia-east1"
      ARTIFACT_REGISTRY_REPO: "ktb8team"
      IMAGE_NAME: "dev/ai"
      DOCKERFILE_PATH: "Dockerfile.gpu"

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 커밋 메시지 추출
      - name: Get commit message
        id: commit_message
        run: |
          {
            echo 'message<<EOF'
            git log -1 --pretty=%B
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      # 🔥 소스 코드 변경사항 체크 (캐시 최적화)
      - name: Check for source code changes
        id: source_changes
        run: |
          # 이전 커밋과 현재 커밋 간의 변경사항 확인
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            # 소스 코드나 requirements.gpu.txt 변경사항 확인
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            
            # 환경변수나 워크플로우 파일만 변경된 경우 체크
            if echo "$CHANGED_FILES" | grep -v -E "^(\.github/workflows/|\.env|requirements\.gpu\.txt)" | grep -q .; then
              echo "source_changed=true" >> $GITHUB_OUTPUT
              echo "🔄 소스 코드 변경사항 감지됨"
            else
              echo "source_changed=false" >> $GITHUB_OUTPUT
              echo "✅ 소스 코드 변경사항 없음 - 캐시 활용 가능"
            fi
          else
            echo "source_changed=true" >> $GITHUB_OUTPUT
            echo "🔄 첫 빌드 또는 강제 푸시 - 전체 빌드 필요"
          fi

      # 환경 변수 파일 생성 (.env) - GPU용 환경변수 사용
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_GPU }}" > .env

      # NVIDIA Container Toolkit 상태 확인
      - name: Verify NVIDIA Container Toolkit
        run: |
          nvidia-smi || true
          docker info | grep -i nvidia || true

      # 2. Google Cloud 인증 (서비스 계정 키 사용)
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # 3. Google Cloud SDK (gcloud CLI) 설정
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # 4. Artifact Registry에 Docker 인증 설정
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev --quiet

      # 🚀 기존 이미지 확인 (캐시 활용)
      - name: Check existing image
        id: existing_image
        run: |
          # 기존 latest 이미지가 있는지 확인
          if docker pull ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest 2>/dev/null; then
            echo "existing_image=true" >> $GITHUB_OUTPUT
            echo "✅ 기존 이미지 발견 - 캐시로 사용 가능"
          else
            echo "existing_image=false" >> $GITHUB_OUTPUT
            echo "🔄 기존 이미지 없음 - 새로 빌드 필요"
          fi

      # 5. Docker 레이어 캐싱 (향상된 캐시 전략)
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('requirements.gpu.txt') }}-${{ hashFiles('Dockerfile.gpu') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ hashFiles('requirements.gpu.txt') }}-
            ${{ runner.os }}-buildx-

      # 6. Docker BuildKit 활성화 + GPU 사용 (캐시 최적화)
      - name: Build Docker image with GPU
        run: |
          # 캐시 설정
          CACHE_FROM=""
          if [ "${{ steps.existing_image.outputs.existing_image }}" == "true" ]; then
            CACHE_FROM="--cache-from ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest"
          fi
          
          # 빌드 시작 시간 기록
          BUILD_START=$(date +%s)
          
          # Docker 빌드 실행 (환경변수는 런타임에 주입되므로 빌드 인자에서 제외)
          DOCKER_BUILDKIT=1 docker build \
            --platform=linux/amd64 \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg CUDA_VISIBLE_DEVICES=all \
            $CACHE_FROM \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --label git_commit="${{ github.sha }}" \
            --label git_author="${{ github.actor }}" \
            --label git_message="${{ steps.commit_message.outputs.message }}" \
            -t ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest \
            -f ${{ env.DOCKERFILE_PATH }} .
          
          # 빌드 시간 계산 및 출력
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          echo "🕒 빌드 소요 시간: ${BUILD_TIME}초"
          
          # 캐시 디렉토리 업데이트
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 빌드 후 이미지 태그 확인 (선택사항)
      - name: List Docker images
        run: |
          echo "=== 빌드 후 모든 이미지 확인 ==="
          docker images
          echo "=== dev/ai 이미지만 확인 ==="
          docker images | grep "dev/ai" || echo "dev/ai 이미지가 없습니다!"

      # 실패 시 간단한 알림 추가 
      - name: Send failure notification
        if: failure()
        run: |
          curl -H "Content-Type: application/json" -d '{
            "content": "🚨 빌드 실패! 깃허브 액션을 확인해주세요: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }' ${{ secrets.DISCORD_WEBHOOK_URL_AI }}

      # 7. Docker 이미지를 Artifact Registry에 푸시 (상세한 로깅 추가)
      - name: Push Docker image to Artifact Registry
        run: |
          echo "Pushing :sha tag (${{ github.sha }})..."
          docker push ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          echo "---------------------------------------------------------------------"
          echo "Inspecting local 'latest' tag before pushing to registry:"
          # 로컬에 태그된 latest 이미지의 상세 정보 확인
          docker inspect ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest
          echo "---------------------------------------------------------------------"
          
          echo "Attempting to push :latest tag..."
          # latest 태그 푸시 시도
          docker push ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest
          
          echo "---------------------------------------------------------------------"
          echo "Describing 'latest' tag in Artifact Registry AFTER push (via gcloud):"
          # gcloud를 사용하여 Artifact Registry에서 직접 latest 태그의 정보를 확인
          gcloud artifacts docker images describe ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest || echo "latest 태그 조회 실패"
          echo "---------------------------------------------------------------------"

      # 8. 이미지 주소 출력
      - name: Output image URL
        run: |
          echo "Image pushed to: ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Latest tag: ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest"

