# cicd-badge-dev.yml

# GitHub Actions ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïù¥Î¶Ñ
name: Build, Push and Deploy Badge Service to Cloud Run with GPU - Development

# ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ìä∏Î¶¨Í±∞ Ï°∞Í±¥ ÏÑ§Ï†ï
# Ìï¥Îãπ Î∏åÎûúÏπòÏóê push Ïù¥Î≤§Ìä∏Í∞Ä Î∞úÏÉùÌñàÏùÑ Îïå Ïã§ÌñâÎê©ÎãàÎã§. ÌïÑÏöîÏóê Îî∞Îùº Î∏åÎûúÏπò Ïù¥Î¶ÑÏùÑ Î≥ÄÍ≤ΩÌïòÏÑ∏Ïöî.  
on:
  push:
    branches:
      - cpu-dev
      - dev
      - feat/100-badge-DeploymentEnvironment

jobs:
  build-push-deploy:
    # Ïª§Î∞ã Î©îÏãúÏßÄÏóê [badge]Í∞Ä Ìè¨Ìï®Îêú Í≤ΩÏö∞ÏóêÎßå Ïã§Ìñâ
    if: ${{ contains(github.event.head_commit.message, '[badge]') }}
    name: Build, Push and Deploy to Cloud Run
    runs-on: self-hosted
    # id-token Í∂åÌïúÏùÄ WIFÎ•º ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏúºÎØÄÎ°ú Ï†úÍ±∞Ìï¥ÎèÑ Îê©ÎãàÎã§. (ÏÑ†ÌÉù ÏÇ¨Ìï≠)
    # permissions:
    #   contents: 'read'

    # ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
    env:
      GCP_PROJECT_ID: ktb8team-458916 
      ARTIFACT_REGISTRY_LOCATION: "asia-east1"
      ARTIFACT_REGISTRY_REPO: "ktb8team"
      IMAGE_NAME: "dev/badge"
      DOCKERFILE_PATH: "Dockerfile.badge"
      CLOUD_RUN_SERVICE_NAME: "badge-dev"
      CLOUD_RUN_REGION: "asia-southeast1"

    steps:
      # 1. ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout code
        uses: actions/checkout@v4

      # NVIDIA Container Toolkit ÏÉÅÌÉú ÌôïÏù∏
      - name: Verify NVIDIA Container Toolkit
        run: |
          nvidia-smi || true
          docker info | grep -i nvidia || true

      # 2. Google Cloud Ïù∏Ï¶ù (ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌÇ§ ÏÇ¨Ïö©)
      # Ï§ëÏöî: GitHub Ï†ÄÏû•ÏÜå SecretsÏóê 'GCP_SA_KEY' Ïù¥Î¶ÑÏúºÎ°ú ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌÇ§ JSON ÌååÏùºÏùò ÎÇ¥Ïö©ÏùÑ Ï†ÄÏû•Ìï¥Ïïº Ìï©ÎãàÎã§.
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # 3. Google Cloud SDK (gcloud CLI) ÏÑ§Ï†ï (ÏÑ†ÌÉù ÏÇ¨Ìï≠, auth Îã®Í≥ÑÏóêÏÑú Ïù¥ÎØ∏ gcloudÍ∞Ä ÏÑ§Ï†ïÎê† Ïàò ÏûàÏùå)
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # 4. Artifact RegistryÏóê Docker Ïù∏Ï¶ù ÏÑ§Ï†ï
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev --quiet

      # üîß HF ÌÜ†ÌÅ∞ Ï∂îÏ∂ú Î∞è GCP Storage ÌååÏùº Îã§Ïö¥Î°úÎìú
      - name: Extract HF Token and Download GCP Storage files
        run: |
          echo "üîß HF ÌÜ†ÌÅ∞ Ï∂îÏ∂ú Ï§ë..."
          
          # GitHub SecretÏóêÏÑú HF ÌÜ†ÌÅ∞ Ï∂îÏ∂ú
          echo '${{ secrets.ENV_BADGE_DEV }}' > temp_env
          export HF_AUTH_TOKEN_VICKY=$(grep "HF_AUTH_TOKEN_VICKY=" temp_env | cut -d'=' -f2- | tr -d '"' | tr -d ' ')
          
          echo "HF_AUTH_TOKEN_VICKY: ${HF_AUTH_TOKEN_VICKY:0:10}****"
          echo "üîÑ HUGGINGFACE_HUB_TOKENÏúºÎ°ú ÏÇ¨Ïö© ÏòàÏ†ï"
          
          # üìÅ Î™®Îç∏ Î°úÎçî ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
          echo "üìÅ Î™®Îç∏ Î°úÎçî ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± Ï§ë..."
          mkdir -p model_inference/loaders
          
          # üîΩ GCP StorageÏóêÏÑú Badge_M.safetensors Îã§Ïö¥Î°úÎìú
          echo "üì• GCP StorageÏóêÏÑú Badge_M.safetensors Îã§Ïö¥Î°úÎìú Ï§ë..."
          if gsutil cp gs://ktb8team/dev/badge_images/Badge_M.safetensors model_inference/loaders/Badge_M.safetensors; then
            echo "‚úÖ Badge_M.safetensors Îã§Ïö¥Î°úÎìú ÏÑ±Í≥µ!"
            
            # ÌååÏùº ÌÅ¨Í∏∞ ÌôïÏù∏
            FILE_SIZE=$(stat -f%z model_inference/loaders/Badge_M.safetensors 2>/dev/null || stat -c%s model_inference/loaders/Badge_M.safetensors 2>/dev/null || echo "0")
            echo "üìä ÌååÏùº ÌÅ¨Í∏∞: $((FILE_SIZE / 1024 / 1024)) MB"
            
            # ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏
            ls -la model_inference/loaders/
          else
            echo "‚ö†Ô∏è  Badge_M.safetensors Îã§Ïö¥Î°úÎìú Ïã§Ìå®ÌñàÏßÄÎßå ÎπåÎìúÎäî Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§."
          fi
          
          # ÌôòÍ≤Ω Î≥ÄÏàòÎ•º Îã§Ïùå Îã®Í≥ÑÎ°ú Ï†ÑÎã¨
          echo "HF_AUTH_TOKEN_VICKY=${HF_AUTH_TOKEN_VICKY}" >> $GITHUB_ENV
          
          # ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
          rm temp_env

      # üê≥ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
      - name: Build Docker image
        run: |
          echo "üê≥ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏãúÏûë..."
          DOCKER_BUILDKIT=1 docker build \
            --platform=linux/amd64 \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg CUDA_VISIBLE_DEVICES=all \
            --build-arg HUGGINGFACE_HUB_TOKEN="${HF_AUTH_TOKEN_VICKY}" \
            -t ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest \
            -f ${{ env.DOCKERFILE_PATH }} .
          
          echo "‚úÖ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏôÑÎ£å!"

      # 5. Docker Ïù¥ÎØ∏ÏßÄÎ•º Artifact RegistryÏóê Ìë∏Ïãú
      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest

      # 6. Docker Î†àÏù¥Ïñ¥ Ï∫êÏã±
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # ENV_BADGE_DEV ÏãúÌÅ¨Î¶øÏóêÏÑú ÌôòÍ≤Ω Î≥ÄÏàò Ï≤òÎ¶¨ Î∞è ÌôïÏù∏
      - name: Process and verify environment variables
        run: |
          echo "üîß ENV_BADGE_DEV ÏãúÌÅ¨Î¶øÏóêÏÑú ÌôòÍ≤Ω Î≥ÄÏàò Ï∂îÏ∂ú Ï§ë..."
          
          echo '${{ secrets.ENV_BADGE_DEV }}' > temp_env
          
          # ÌôòÍ≤Ω Î≥ÄÏàòÎì§ÏùÑ Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú Ï∂îÏ∂ú
          export HF_AUTH_TOKEN_VICKY=$(grep "HF_AUTH_TOKEN_VICKY=" temp_env | cut -d'=' -f2- | tr -d '"' | tr -d ' ')
          export HF_AUTH_TOKEN=${HF_AUTH_TOKEN_VICKY}
          export GCP_PROJECT_ID=$(grep "GCP_PROJECT_ID=" temp_env | cut -d'=' -f2- | tr -d '"' | tr -d ' ')
          export ARTIFACT_REGISTRY_LOCATION=$(grep "ARTIFACT_REGISTRY_LOCATION=" temp_env | cut -d'=' -f2- | tr -d '"' | tr -d ' ')
          export GCP_QUEUE_NAME=$(grep "GCP_QUEUE_NAME=" temp_env | cut -d'=' -f2- | tr -d '"' | tr -d ' ')
          export AI_SERVER_URL=$(grep "AI_SERVER_URL=" temp_env | cut -d'=' -f2- | tr -d '"' | tr -d ' ')
          export BE_SERVER_URL=$(grep "BE_SERVER_URL=" temp_env | cut -d'=' -f2- | tr -d '"' | tr -d ' ')
          export GCP_SERVICE_EMAIL=$(grep "GCP_SERVICE_EMAIL=" temp_env | cut -d'=' -f2- | tr -d '"' | tr -d ' ')
          
          # gcloud Î™ÖÎ†πÏñ¥Ïö© ÌôòÍ≤Ω Î≥ÄÏàò Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
          ENV_VARS="HF_AUTH_TOKEN_VICKY=${HF_AUTH_TOKEN_VICKY}"
          ENV_VARS="${ENV_VARS},HF_AUTH_TOKEN=${HF_AUTH_TOKEN}"
          ENV_VARS="${ENV_VARS},HUGGING_FACE_HUB_TOKEN=${HF_AUTH_TOKEN}"
          ENV_VARS="${ENV_VARS},HUGGINGFACE_HUB_TOKEN=${HF_AUTH_TOKEN_VICKY}"
          ENV_VARS="${ENV_VARS},GCP_PROJECT_ID=${GCP_PROJECT_ID}"
          ENV_VARS="${ENV_VARS},ARTIFACT_REGISTRY_LOCATION=${ARTIFACT_REGISTRY_LOCATION}"
          ENV_VARS="${ENV_VARS},GCP_QUEUE_NAME=${GCP_QUEUE_NAME}"
          ENV_VARS="${ENV_VARS},AI_SERVER_URL=${AI_SERVER_URL}"
          ENV_VARS="${ENV_VARS},BE_SERVER_URL=${BE_SERVER_URL}"
          ENV_VARS="${ENV_VARS},GCP_SERVICE_EMAIL=${GCP_SERVICE_EMAIL}"
          
          # Ï∫êÏãú ÎîîÎ†âÌÜ†Î¶¨ ÌôòÍ≤Ω Î≥ÄÏàò Ï∂îÍ∞Ä
          ENV_VARS="${ENV_VARS},HUGGINGFACE_HUB_CACHE=/app/.cache/huggingface"
          ENV_VARS="${ENV_VARS},TRANSFORMERS_CACHE=/app/.cache/transformers"
          ENV_VARS="${ENV_VARS},HF_HOME=/app/.cache/huggingface"
          
          echo "${ENV_VARS}" > env_vars_string
          
          echo "‚úÖ ÌôòÍ≤Ω Î≥ÄÏàò Ï≤òÎ¶¨ ÏôÑÎ£å!"
          rm temp_env

      # Cloud RunÏóê Î∞∞Ìè¨
      - name: Deploy to Cloud Run
        run: |
          ENV_VARS=$(cat env_vars_string)
          
          # Chrome Ï†ÑÏö© ÌôòÍ≤Ω Î≥ÄÏàò Ï∂îÍ∞Ä
          ENV_VARS="${ENV_VARS},DISPLAY=:99"
          ENV_VARS="${ENV_VARS},CHROME_NO_SANDBOX=1"
          ENV_VARS="${ENV_VARS},CHROME_BIN=/usr/bin/google-chrome"
          ENV_VARS="${ENV_VARS},CHROMEDRIVER_PATH=/usr/bin/chromedriver"
          ENV_VARS="${ENV_VARS},CHROME_DISABLE_GPU=1"
          ENV_VARS="${ENV_VARS},CHROME_DISABLE_DEV_SHM_USAGE=1"
          ENV_VARS="${ENV_VARS},CHROME_DISABLE_EXTENSIONS=1"
          ENV_VARS="${ENV_VARS},CHROME_DISABLE_BACKGROUND_TIMER_THROTTLING=1"
          ENV_VARS="${ENV_VARS},CHROME_DISABLE_RENDERER_BACKGROUNDING=1"
          ENV_VARS="${ENV_VARS},CHROME_DISABLE_BACKGROUNDING_OCCLUDED_WINDOWS=1"
          ENV_VARS="${ENV_VARS},CHROME_DISABLE_IPC_FLOODING_PROTECTION=1"
          ENV_VARS="${ENV_VARS},CHROME_SINGLE_PROCESS=1"
          ENV_VARS="${ENV_VARS},CHROME_REMOTE_DEBUGGING_PORT=9222"
          
          echo "üöÄ Cloud Run Î∞∞Ìè¨ ÏãúÏûë..."
          
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.CLOUD_RUN_REGION }} \
            --allow-unauthenticated \
            --memory 16Gi \
            --cpu 4 \
            --port 8080 \
            --max-instances 1 \
            --gpu 1 \
            --gpu-type nvidia-l4 \
            --no-gpu-zonal-redundancy \
            --timeout 3600 \
            --execution-environment gen2 \
            --cpu-boost \
            --no-cpu-throttling \
            --session-affinity \
            --no-use-http2 \
            --set-env-vars="${ENV_VARS}"
          
          echo "‚úÖ Cloud Run Î∞∞Ìè¨ ÏôÑÎ£å!"
          rm env_vars_string

      # Ïù¥ÎØ∏ÏßÄ Ï£ºÏÜå Ï∂úÎ†•
      - name: Output image URL
        run: |
          echo "Image pushed to: ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
      # DiscordÎ°ú ÎπåÎìú Î∞è Î∞∞Ìè¨ ÏÑ±Í≥µ ÏïåÎ¶º Î≥¥ÎÇ¥Í∏∞
      - name: Send Discord notification
        if: success()
        run: |
          # ÌòÑÏû¨ ÏãúÍ∞Ñ (KST)
          CURRENT_TIME=$(TZ='Asia/Seoul' date '+%YÎÖÑ %mÏõî %dÏùº %H:%M:%S')
          
          # Ïù¥ÎØ∏ÏßÄ URL
          IMAGE_URL="${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          # Ïª§Î∞ã ÏûëÏÑ±ÏûêÏôÄ Î©îÏãúÏßÄ
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          
          # Cloud Run ÏÑúÎπÑÏä§ URL Í∞ÄÏ†∏Ïò§Í∏∞
          SERVICE_URL=$(gcloud run services describe ${{ env.CLOUD_RUN_SERVICE_NAME }} --region ${{ env.CLOUD_RUN_REGION }} --format='value(status.url)')
          
          # Discord ÏõπÌõÖ ÌéòÏù¥Î°úÎìú
          curl -H "Content-Type: application/json" -X POST -d '{
            "username": "ü§ñ PUMATI Ïù∏Í≥µÏßÄÎä• ÎπåÎìú & Î∞∞Ìè¨ Î¥á",
            "avatar_url": "https://avatars.githubusercontent.com/u/583231",
            "content": "üåü **'"${COMMIT_AUTHOR}"'** ÎãòÏù¥ ÏÉà ÎπåÎìúÎ•º ÏôÑÎ£åÌïòÍ≥† Cloud RunÏóê Î∞∞Ìè¨ÌñàÏäµÎãàÎã§! üöÄ\n\nüì¶ **Î™®Îç∏ Ìè¨Ìï® ÎπåÎìú**: SDXL Î™®Îç∏Ïù¥ Docker Ïù¥ÎØ∏ÏßÄÏóê ÎØ∏Î¶¨ Ìè¨Ìï®ÎêòÏñ¥ Ï¶âÏãú ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§!",
            "embeds": [{
              "title": "‚úÖ AI ÏÑúÎπÑÏä§ ÎπåÎìú & Î∞∞Ìè¨ ÏÑ±Í≥µ! üéâ (Î™®Îç∏ Ìè¨Ìï®)",
              "color": 3066993,
              "description": "üî• **'"${COMMIT_AUTHOR}"'** ÎãòÏù¥ Ìë∏ÏãúÌïú ÏΩîÎìúÏùò Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Cloud Run Î∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üôå\n\nüöÄ **SDXL Î™®Îç∏Ïù¥ Ïù¥ÎØ∏ÏßÄÏóê Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏñ¥ Ï¶âÏãú Ïã§Ìñâ Í∞ÄÎä•Ìï©ÎãàÎã§!**",
              "fields": [
                {
                  "name": "üë®‚Äçüíª Ìë∏ÏãúÌïú ÏÇ¨Îûå üëë",
                  "value": "```fix\n'"${COMMIT_AUTHOR}"'\n```",
                  "inline": false
                },
                {
                  "name": "üìù Ïª§Î∞ã Î©îÏãúÏßÄ üí¨",
                  "value": "üìå '"${COMMIT_MESSAGE}"' üìé",
                  "inline": false
                },
                {
                  "name": "üïí Î∞∞Ìè¨ ÏãúÍ∞Ñ ‚è∞",
                  "value": "üóìÔ∏è '"${CURRENT_TIME}"' üï∞Ô∏è",
                  "inline": true
                },
                {
                  "name": "üñºÔ∏è Ïù¥ÎØ∏ÏßÄ URL üì¶",
                  "value": "```'"${IMAGE_URL}"'```",
                  "inline": false
                },
                {
                  "name": "üåê ÏÑúÎπÑÏä§ URL üîó",
                  "value": "['"${SERVICE_URL}"']('"${SERVICE_URL}"')",
                  "inline": false
                },
                {
                  "name": "üîÑ GitHub Actions üîç",
                  "value": "[ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìñâ Í≤∞Í≥º Î≥¥Í∏∞](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                  "inline": false
                }
              ],
              "thumbnail": {
                "url": "https://robohash.org/'"${COMMIT_AUTHOR}"'?set=set3&size=128x128"
              },
              "footer": {
                "text": "üèÜ ktb8team AI Ïù¥ÎØ∏ÏßÄ ÎπåÎìú & Î∞∞Ìè¨ ÏãúÏä§ÌÖú - '"${COMMIT_AUTHOR}"' ÎãòÏùò ÏûëÏóÖ üõ†Ô∏è"
              }
            }]
          }' ${{ secrets.DISCORD_WEBHOOK_URL_AI }}
